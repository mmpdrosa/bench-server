// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Retailer {
  id       String @id @default(uuid())
  name     String @unique
  html_url String

  productsRetailer ProductRetailer[]
  coupons          Coupon[]

  @@map("retailers")
}

model Product {
  id              String @id @default(uuid())
  title           String
  reference_price Int?
  image_url       String

  productCategory          ProductCategory?
  productSubcategory       ProductSubcategory?
  productRetailers         ProductRetailer[]
  usersProductNotification UserProductNotification[]
  priceHistory             PriceHistory[]

  @@map("products")
}

model Coupon {
  id            String  @id @default(uuid())
  available     Boolean
  code          String
  discount      String
  minimum_spend Int?
  store         String?
  description   String?
  retailer_id   String

  retailer Retailer @relation(fields: [retailer_id], references: [id], onDelete: Cascade)

  productsRetailer ProductRetailer[]

  @@unique([code, retailer_id])
  @@map("coupons")
}

model ProductRetailer {
  id          String   @id @default(uuid())
  price       Int
  store       String?
  available   Boolean
  html_url    String
  dummy       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  product_id  String
  retailer_id String
  coupon_id   String?

  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  retailer Retailer @relation(fields: [retailer_id], references: [id], onDelete: Cascade)
  coupon   Coupon?  @relation(fields: [coupon_id], references: [id], onDelete: SetNull)

  @@unique([product_id, retailer_id])
  @@map("products_retailers")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  subcategories             Subcategory[]
  productsCategory          ProductCategory[]
  usersCategoryNotification UserCategoryNotification[]

  @@map("categories")
}

model Subcategory {
  id          String @id @default(uuid())
  name        String
  category_id String

  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  productsSubcategory ProductSubcategory[]

  @@unique([category_id, name])
  @@map("subcategories")
}

model ProductCategory {
  id          String @id @default(uuid())
  product_id  String @unique
  category_id String

  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("products_categories")
}

model ProductSubcategory {
  id             String @id @default(uuid())
  product_id     String @unique
  subcategory_id String

  product     Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategory_id], references: [id], onDelete: Cascade)

  @@map("products_subcategories")
}

model PriceHistory {
  id         String   @id @default(uuid())
  price      Int
  date       DateTime
  product_id String

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("prices_history")
}

model Subscription {
  id       String @id @default(uuid())
  user_id  String
  endpoint String
  keys     Json

  @@unique([user_id, endpoint])
  @@map("subscriptions")
}

model UserProductNotification {
  id         String @id @default(uuid())
  price      Int
  user_id    String
  product_id String

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("users_products_notifications")
}

model UserCategoryNotification {
  id          String @id @default(uuid())
  user_id     String
  category_id String

  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("users_categories_notifications")
}
